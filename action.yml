#------------------------------------------------------------------------------
# written by: mcdaniel
# date: june-2022
#
# usage: re-usable workflow to initialize Github environment:
#   - configure AWS credentials
#   - install Python
#   - install tutor
#   - install kubectl
#------------------------------------------------------------------------------
name: Open edX Tutor k8s init
description: Github Action to configure Ubuntu environment for tutor k8s build & deploy workflows
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  eks-namespace:
    description: 'The Kubernetes namesapce to which the Open edX platform environment will be deployed. Example: openedx-prod'
    required: false
    default: UNASSIGNED
    type: string
  eks-cluster-name:
    description: 'The Kubernetes cluster to which the Open edX platform environment will be deployed. Example: yourorg-global-live'
    required: false
    default: UNASSIGNED
    type: string
  aws-region:
    description: 'The AWS region in which the EKS cluster is hosted. Example: us-east-1'
    required: false
    default: us-east-1
    type: string
  tutor-version:
    description: 'The version of tutor to install'
    required: false
    default: "v14.0.2"
    type: string

runs:
  using: "composite"
  steps:
    # replaces: sudo snap install kubectl --channel=1.23/stable --classic
    #- name: Install kubectl
    #  if: ${{ inputs.eks-cluster-name != 'UNASSIGNED' }}
    #  id: kubectl-install
    #  uses: azure/setup-kubectl@v2.1
    #  with:
    #    version: 'v1.23.6'

    # get the Kubernetes kubeconfig for our cluster. This is a prerequisite to getting any other   data about or contained within our cluster.
    # see: https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
    #
    # summarizing: the kubeconfig (Kubernetes Configuration) is a text file that contains at a minimum
    # three values that are necessary in order to access the Kubernetes cluster using kubectl command line:
    #   - API server endpoint
    #   - EKS Cluster ARN
    #   - Certificate authority (ie the private ssh key)
    - name: Configure kubectl
      if: ${{ inputs.eks-cluster-name != 'UNASSIGNED' }}
      id: kubectl-configure
      shell: bash
      run: |-
        sudo snap install kubectl --channel=1.23/stable --classic
        aws eks --region ${{ inputs.aws-region }} update-kubeconfig --name ${{ inputs.eks-cluster-name }} --alias ${{ inputs.eks-cluster-name }}

    - name: Check awscli version
      shell: bash
      run: |-
        echo "aws cli version:"
        echo "----------------"
        aws --version
        echo
        echo "aws IAM user:"
        echo "-------------"
        aws sts get-caller-identity

    - name: Check kubectl version
      if: ${{ inputs.eks-cluster-name != 'UNASSIGNED' }}
      shell: bash
      run: |-
        echo "kubectl version and diagnostic info:"
        echo "------------------------------------"
        kubectl version --short --v=9

    # install the latest version of python3 which is a prerequisite for running Tutor
    - name: Install packages required by tutor
      shell: bash
      run: |-
        sudo apt install python3 python3-pip libyaml-dev

    # install latest version of yq
    - name: Install yq
      shell: bash
      run: |-
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod a+x /usr/local/bin/yq
        export PATH="/usr/local/bin/:$PATH"
        yq --version

    # install Tutor which we'll use for configuring and deploying Open edX
    - name: Install Tutor
      shell: bash
      run: |-
        pip install --upgrade pyyaml
        pip install tutor==v14.0.2
        tutor config save
        echo "TUTOR_VERSION=$(tutor --version | cut -f3 -d' ')" >> $GITHUB_ENV
        echo tutor root: $(tutor config printroot)

    - name: Load tutor settings
      shell: bash
      run: |-
        echo "TUTOR_RUN_CADDY=false" >> $GITHUB_ENV
        echo "TUTOR_RUN_NGINX=false" >> $GITHUB_ENV

    - name: Load additional tutor environment specific settings
      if: ${{ inputs.eks-namespace != 'UNASSIGNED' }}
      shell: bash
      run: |-
        echo "TUTOR_ID=tutor-${{ inputs.eks-namespace }}" >> $GITHUB_ENV
        echo "TUTOR_K8S_NAMESPACE=${{ inputs.eks-namespace }}" >> $GITHUB_ENV

    - name: Intialize forthcoming environment variables that we want to mask
      shell: bash
      run: |-
        echo "CREDENTIALS_SECRET_KEY=''" >> $GITHUB_ENV
        echo "DISCOVERY_SECRET_KEY=''" >> $GITHUB_ENV
        echo "ECOMMERCE_SECRET_KEY=''" >> $GITHUB_ENV
        echo "NOTES_SECRET_KEY=''" >> $GITHUB_ENV
        echo "OPENEDX_SECRET_KEY=''" >> $GITHUB_ENV
        echo "XQUEUE_SECRET_KEY=''" >> $GITHUB_ENV

        echo "ECOMMERCE_API_KEY=''" >> $GITHUB_ENV
        echo "DISCOVERY_API_KEY=''" >> $GITHUB_ENV
        echo "OPENEDX_API_KEY=''" >> $GITHUB_ENV

        echo "CMS_OAUTH2_SECRET=''" >> $GITHUB_ENV
        echo "CREDENTIALS_OAUTH2_SECRET=''" >> $GITHUB_ENV
        echo "DISCOVERY_OAUTH2_SECRET=''" >> $GITHUB_ENV
        echo "ECOMMERCE_OAUTH2_SECRET=''" >> $GITHUB_ENV
        echo "NOTES_OAUTH2_SECRET=''" >> $GITHUB_ENV
        echo "XQUEUE_OAUTH2_SECRET=''" >> $GITHUB_ENV
        echo "CMS_OAUTH2_SECRET_SSO=''" >> $GITHUB_ENV
        echo "CREDENTIALS_OAUTH2_SECRET_SSO=''" >> $GITHUB_ENV
        echo "DISCOVERY_OAUTH2_SECRET_SSO=''" >> $GITHUB_ENV
        echo "ECOMMERCE_OAUTH2_SECRET_SSO=''" >> $GITHUB_ENV
        echo "NOTES_OAUTH2_SECRET_SSO=''" >> $GITHUB_ENV
        echo "XQUEUE_OAUTH2_SECRET_SSO=''" >> $GITHUB_ENV

        echo "JWT_RSA_PRIVATE_KEY=''" >> $GITHUB_ENV
        echo "COMMENTS_SERVICE_KEY=''" >> $GITHUB_ENV
        echo "EMAIL_HOST_PASSWORD=''" >> $GITHUB_ENV

    # Note: data stored as k8s secrets are masked as they
    #       are extracted by openedx-actions/tutor-k8s-get-secret
    - name: Mask sensitive data generated by tutor
      shell: bash
      run: |-
        echo "::add-mask::$CREDENTIALS_SECRET_KEY"
        echo "::add-mask::$DISCOVERY_SECRET_KEY"
        echo "::add-mask::$ECOMMERCE_SECRET_KEY"
        echo "::add-mask::$NOTES_SECRET_KEY"
        echo "::add-mask::$OPENEDX_SECRET_KEY"
        echo "::add-mask::$XQUEUE_SECRET_KEY"

        echo "::add-mask::$ECOMMERCE_API_KEY"
        echo "::add-mask::$DISCOVERY_API_KEY"
        echo "::add-mask::$OPENEDX_API_KEY"

        echo "::add-mask::$CMS_OAUTH2_SECRET"
        echo "::add-mask::$CREDENTIALS_OAUTH2_SECRET"
        echo "::add-mask::$DISCOVERY_OAUTH2_SECRET"
        echo "::add-mask::$ECOMMERCE_OAUTH2_SECRET"
        echo "::add-mask::$NOTES_OAUTH2_SECRET"
        echo "::add-mask::$XQUEUE_OAUTH2_SECRET"
        echo "::add-mask::$CMS_OAUTH2_SECRET_SSO"
        echo "::add-mask::$CREDENTIALS_OAUTH2_SECRET_SSO"
        echo "::add-mask::$DISCOVERY_OAUTH2_SECRET_SSO"
        echo "::add-mask::$ECOMMERCE_OAUTH2_SECRET_SSO"
        echo "::add-mask::$NOTES_OAUTH2_SECRET_SSO"
        echo "::add-mask::$XQUEUE_OAUTH2_SECRET_SSO"

        echo "::add-mask::$JWT_RSA_PRIVATE_KEY"
        echo "::add-mask::$COMMENTS_SERVICE_KEY"
        echo "::add-mask::$EMAIL_HOST_PASSWORD"
